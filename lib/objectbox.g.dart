// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/receipt.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7902204496121578843),
      name: 'Receipt',
      lastPropertyId: const IdUid(3, 5666447270973309661),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3926383439789799976),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3431081466214356990),
            name: 'amount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5666447270973309661),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 846532669960630462),
            relationTarget: 'Customer')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6708028264696134565),
      name: 'Customer',
      lastPropertyId: const IdUid(3, 8952150615026309454),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6463611949188190839),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 65459818976859752),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8952150615026309454),
            name: 'company',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'orders', srcEntity: 'Receipt', srcField: '')
      ])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6708028264696134565),
      lastIndexId: const IdUid(1, 846532669960630462),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Receipt: EntityDefinition<Receipt>(
        model: _entities[0],
        toOneRelations: (Receipt object) => [object.customer],
        toManyRelations: (Receipt object) => {},
        getId: (Receipt object) => object.id,
        setId: (Receipt object, int id) {
          object.id = id;
        },
        objectToFB: (Receipt object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.amount);
          fbb.addInt64(2, object.customer.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final amountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Receipt(id: idParam, amount: amountParam);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.customer.attach(store);
          return object;
        }),
    Customer: EntityDefinition<Customer>(
        model: _entities[1],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {
              RelInfo<Receipt>.toOneBacklink(
                      3, object.id, (Receipt srcObject) => srcObject.customer):
                  object.orders
            },
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final companyOffset = fbb.writeString(object.company);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, companyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final companyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object =
              Customer(id: idParam, name: nameParam, company: companyParam);
          InternalToManyAccess.setRelInfo<Customer>(
              object.orders,
              store,
              RelInfo<Receipt>.toOneBacklink(
                  3, object.id, (Receipt srcObject) => srcObject.customer));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Receipt] entity fields to define ObjectBox queries.
class Receipt_ {
  /// see [Receipt.id]
  static final id = QueryIntegerProperty<Receipt>(_entities[0].properties[0]);

  /// see [Receipt.amount]
  static final amount =
      QueryIntegerProperty<Receipt>(_entities[0].properties[1]);

  /// see [Receipt.customer]
  static final customer =
      QueryRelationToOne<Receipt, Customer>(_entities[0].properties[2]);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[1].properties[0]);

  /// see [Customer.name]
  static final name = QueryStringProperty<Customer>(_entities[1].properties[1]);

  /// see [Customer.company]
  static final company =
      QueryStringProperty<Customer>(_entities[1].properties[2]);
}
